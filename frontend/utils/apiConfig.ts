// API ÈÖçÁΩÆ
const isElectron = typeof window !== 'undefined' && window.electronAPI;
const isDev = process.env.NODE_ENV === 'development';

// Ê†πÊçÆÁéØÂ¢ÉÁ°ÆÂÆö API Âü∫Á°ÄÂú∞ÂùÄ
export const API_BASE_URL = (() => {
  if (isDev && !isElectron) {
    // ÂºÄÂèëÁéØÂ¢ÉÁöÑÁΩëÈ°µÁâàÔºå‰ΩøÁî®‰ª£ÁêÜ
    return '/api';
  } else {
    // Áîü‰∫ßÁéØÂ¢ÉÁöÑ Electron ÁâàÊú¨ÔºåÁõ¥Êé•ËøûÊé•ÂêéÁ´Ø
    const backendHost = process.env.NEXT_PUBLIC_BACKEND_HOST || '192.168.31.134';
    const backendPort = process.env.NEXT_PUBLIC_BACKEND_PORT || '35001';
    return `http://${backendHost}:${backendPort}/api`;
  }
})();

console.log('üîß API ÈÖçÁΩÆ:', {
  isDev,
  isElectron,
  API_BASE_URL
});

// API ËØ∑Ê±ÇÂ∞ÅË£Ö
export const apiRequest = async (endpoint: string, options: RequestInit = {}) => {
  const url = `${API_BASE_URL}${endpoint}`;
  
  const defaultOptions: RequestInit = {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  };

  console.log(`üì° API ËØ∑Ê±Ç: ${options.method || 'GET'} ${url}`);
  
  try {
    const response = await fetch(url, defaultOptions);
    
    if (!response.ok) {
      throw new Error(`API ËØ∑Ê±ÇÂ§±Ë¥•: ${response.status} ${response.statusText}`);
    }
    
    return response;
  } catch (error) {
    console.error(`‚ùå API ËØ∑Ê±ÇÂ§±Ë¥• ${url}:`, error);
    throw error;
  }
};

export default API_BASE_URL;