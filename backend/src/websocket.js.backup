const WebSocket = require('ws');
const jwt = require('jsonwebtoken');
const url = require('url');
require('dotenv').config();

// JWT密钥 - 从环境变量读取
const JWT_SECRET = process.env.JWT_SECRET;

// 创建WebSocket服务器
const wss = new WebSocket.Server({
  port: 35001,
  path: '/ws',
  verifyClient: (info) => {
    // 从查询参数中获取token
    const query = url.parse(info.req.url, true).query;
    const token = query.token;
    
    if (!token) {
      console.log('WebSocket连接被拒绝：缺少token');
      return false;
    }
    
    try {
      // 验证JWT token
      const decoded = jwt.verify(token, JWT_SECRET);
      info.req.user = decoded;
      console.log(`WebSocket认证成功：用户 ${decoded.name} (ID: ${decoded.id})`);
      return true;
    } catch (error) {
      console.log('WebSocket连接被拒绝：token无效', error.message);
      return false;
    }
  }
});

// 存储连接的客户端
const clients = new Map();

wss.on('connection', (ws, req) => {
  const user = req.user;
  const clientId = `${user.id}_${Date.now()}`;
  
  // 存储客户端信息
  clients.set(clientId, {
    ws,
    user,
    lastPing: Date.now()
  });
  
  console.log(`用户 ${user.name} 已连接 WebSocket (客户端ID: ${clientId})`);
  console.log(`当前连接数: ${clients.size}`);
  
  // 发送连接确认
  ws.send(JSON.stringify({
    type: 'connection_established',
    data: {
      clientId,
      user: user.name,
      timestamp: new Date().toISOString()
    }
  }));
  
  // 处理消息
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      
      // 处理心跳
      if (data.type === 'ping') {
        clients.get(clientId).lastPing = Date.now();
        ws.send(JSON.stringify({ type: 'pong' }));
        return;
      }
      
      console.log(`收到来自 ${user.name} 的消息:`, data);
      
      // 广播消息给其他客户端（除了发送者）
      broadcastToOthers(clientId, data);
      
    } catch (error) {
      console.error('解析WebSocket消息失败:', error);
    }
  });
  
  // 处理连接关闭
  ws.on('close', () => {
    clients.delete(clientId);
    console.log(`用户 ${user.name} 断开 WebSocket 连接 (客户端ID: ${clientId})`);
    console.log(`当前连接数: ${clients.size}`);
  });
  
  // 处理连接错误
  ws.on('error', (error) => {
    console.error(`WebSocket连接错误 (用户: ${user.name}):`, error);
    clients.delete(clientId);
  });
});

// 广播消息给其他客户端
function broadcastToOthers(senderClientId, message) {
  const senderClient = clients.get(senderClientId);
  if (!senderClient) return;
  
  let broadcastCount = 0;
  
  clients.forEach((client, clientId) => {
    // 跳过发送者
    if (clientId === senderClientId) return;
    
    // 跳过已断开的连接
    if (client.ws.readyState !== WebSocket.OPEN) {
      clients.delete(clientId);
      return;
    }
    
    try {
      // 添加发送者信息
      const messageWithSender = {
        ...message,
        userId: senderClient.user.id,
        userName: senderClient.user.name,
        timestamp: new Date().toISOString()
      };
      
      client.ws.send(JSON.stringify(messageWithSender));
      broadcastCount++;
    } catch (error) {
      console.error(`发送消息到客户端 ${clientId} 失败:`, error);
      clients.delete(clientId);
    }
  });
  
  console.log(`消息已广播给 ${broadcastCount} 个客户端`);
}

// 定期清理断开的连接
setInterval(() => {
  const now = Date.now();
  let cleanedCount = 0;
  
  clients.forEach((client, clientId) => {
    // 检查连接状态
    if (client.ws.readyState !== WebSocket.OPEN) {
      clients.delete(clientId);
      cleanedCount++;
      return;
    }
    
    // 检查心跳超时 (2分钟)
    if (now - client.lastPing > 120000) {
      console.log(`客户端 ${clientId} 心跳超时，关闭连接`);
      client.ws.close();
      clients.delete(clientId);
      cleanedCount++;
    }
  });
  
  if (cleanedCount > 0) {
    console.log(`清理了 ${cleanedCount} 个断开的连接，当前连接数: ${clients.size}`);
  }
}, 60000); // 每分钟检查一次

// 优雅停机处理
process.on('SIGTERM', () => {
  console.log('收到 SIGTERM 信号，正在关闭 WebSocket 服务器...');
  
  // 通知所有客户端服务器即将关闭
  clients.forEach((client) => {
    if (client.ws.readyState === WebSocket.OPEN) {
      client.ws.send(JSON.stringify({
        type: 'server_shutdown',
        data: {
          message: '服务器正在维护，请稍后重试',
          timestamp: new Date().toISOString()
        }
      }));
      client.ws.close();
    }
  });
  
  wss.close((err) => {
    if (err) {
      console.error('关闭 WebSocket 服务器时出错:', err);
    } else {
      console.log('WebSocket 服务器已关闭');
    }
    process.exit(0);
  });
});

console.log('WebSocket 服务器已启动，监听端口 35001');
console.log('WebSocket URL: ws://localhost:35001/ws?token=YOUR_JWT_TOKEN');

// 错误处理
wss.on('error', (error) => {
  console.error('WebSocket 服务器错误:', error);
});

process.on('uncaughtException', (error) => {
  console.error('未捕获的异常:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('未处理的 Promise 拒绝:', reason);
  process.exit(1);
});